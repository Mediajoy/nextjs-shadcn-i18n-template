

# Next.js + shadcn Web App Template - Complete Setup Guide ## PROJECT OVERVIEW Create a production-ready Next.js web application with shadcn/ui components, advanced form handling with conditionals, file uploads, email notifications, and database-ready architecture. ## COMPATIBILITY & VERSION REQUI

pasted

can we continue this prompt for building the next js web app :
please add a  back office interface to autheticate securely and check form submission or any other database related.

Edit
I'll help you extend the Next.js template with a secure back office interface for authentication and form submission management. Let me create a comprehensive addition to your existing setup.


Back Office Interface Extension - Authentication & Admin Dashboard
Document 



Continue

Edit

Back Office Interface Extension - Authentication & Admin Dashboard
Document ∙ Version 2 

Back Office Interface Extension - Authentication & Admin Dashboard
Document ∙ Version 3 




Actually I just wanted the  extra instructions to add tho the prompt that I attached

Pasted content
20.79 KB •768 lines
•
Formatting may be inconsistent from source
# Next.js + shadcn Web App Template - Complete Setup Guide

## PROJECT OVERVIEW
Create a production-ready Next.js web application with shadcn/ui components, advanced form handling with conditionals, file uploads, email notifications, and database-ready architecture.

## COMPATIBILITY & VERSION REQUIREMENTS
- **Next.js**: Use version 14.x (NOT 15.x due to compatibility issues)
- **React**: Use version 18.x (avoid React 19 for now)
- **Node.js**: Use version 18.x or 20.x
- **Package Manager**: Use npm (avoid bun/pnpm for better compatibility)
- **TypeScript**: Enable TypeScript for better development experience

## CRITICAL SETUP RULES
1. **ALWAYS use Next.js 14.x** - Version 15 has known compatibility issues with shadcn
2. **Initialize project first, then add shadcn** - Never use create-next-app with shadcn templates
3. **Use npm, not yarn/pnpm/bun** - Better compatibility with shadcn dependencies
4. **Install dependencies in correct order** - Follow the exact sequence below

## STEP-BY-STEP IMPLEMENTATION

### 1. Project Initialization
```bash
# Create Next.js project with specific version
npx create-next-app@14 my-app-template --typescript --tailwind --eslint --app --src-dir --import-alias "@/*"
cd my-app-template

# Initialize shadcn (AFTER Next.js setup)
npx shadcn@latest init
```

### 2. Required Dependencies
Install these packages in this exact order:
```bash
# Core form handling
npm install react-hook-form @hookform/resolvers zod

# Additional Vercel dependencies
npm install @vercel/postgres @vercel/blob

# Email functionality
npm install @emailjs/browser

# File upload & handling
npm install react-dropzone

# Database integration (choose one)
npm install prisma @prisma/client  # For SQL databases
# OR
npm install mongoose  # For MongoDB

# Additional utilities
npm install date-fns clsx tailwind-merge lucide-react

# Development dependencies
npm install -D @types/node
```

### 3. shadcn Components to Install
```bash
# Essential form components
npx shadcn@latest add form
npx shadcn@latest add input
npx shadcn@latest add button
npx shadcn@latest add select
npx shadcn@latest add checkbox
npx shadcn@latest add radio-group
npx shadcn@latest add textarea
npx shadcn@latest add switch
npx shadcn@latest add calendar
npx shadcn@latest add popover

# Layout & feedback components
npx shadcn@latest add card
npx shadcn@latest add alert
npx shadcn@latest add toast
npx shadcn@latest add dialog
npx shadcn@latest add progress

# Data display
npx shadcn@latest add table
npx shadcn@latest add badge
```

## CONFIGURATION FILES

### 1. Tailwind Config (tailwind.config.js)
```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
```

### 2. Environment Variables (.env.local)
```env
# Database (choose one)
DATABASE_URL="your-database-connection-string"
MONGODB_URI="your-mongodb-connection-string"

# Email Service (EmailJS)
NEXT_PUBLIC_EMAILJS_SERVICE_ID="your-service-id"
NEXT_PUBLIC_EMAILJS_TEMPLATE_ID="your-template-id"
NEXT_PUBLIC_EMAILJS_PUBLIC_KEY="your-public-key"

# File Upload (Vercel-compatible)
NEXT_PUBLIC_VERCEL_BLOB_READ_WRITE_TOKEN="your-vercel-blob-token"

# Vercel Postgres Database
POSTGRES_URL="your-vercel-postgres-url"
POSTGRES_PRISMA_URL="your-vercel-postgres-prisma-url"
POSTGRES_URL_NO_SSL="your-vercel-postgres-no-ssl-url"
POSTGRES_URL_NON_POOLING="your-vercel-postgres-non-pooling-url"
POSTGRES_USER="your-postgres-user"
POSTGRES_HOST="your-postgres-host"
POSTGRES_PASSWORD="your-postgres-password"
POSTGRES_DATABASE="your-postgres-database"
```

## CORE FEATURES TO IMPLEMENT

### 1. Advanced Form Component with Conditionals
Create `src/components/AdvancedForm.tsx`:
- Use React Hook Form + Zod validation
- Include conditional field rendering based on user selections
- Handle all input types: text, email, select, checkbox, radio, file upload
- Real-time validation feedback
- Form state management with loading states

### 2. File Upload Component
Create `src/components/FileUpload.tsx`:
- Drag-and-drop interface using react-dropzone
- Multiple file support with preview
- File type and size validation
- Progress indicators
- Integration with React Hook Form

### 3. Email Notification Service
Create `src/lib/email.ts`:
- EmailJS integration for client-side email sending
- Template-based email composition
- Form data formatting for email templates
- Error handling and retry logic

### 4. Database Integration Layer
Create `src/lib/database.ts`:
- Connection utilities
- CRUD operations
- Type-safe database queries
- Error handling and connection pooling

### 5. Backend API Routes for Form Submission
Create the following API endpoints:

**`src/app/api/forms/submit/route.ts`** - Main form submission endpoint
**`src/app/api/upload/route.ts`** - File upload handling
**`src/app/api/forms/[id]/route.ts`** - Get/Update specific form submissions

### 6. Toast Notification System
- Success/error feedback for all operations
- Non-blocking user notifications
- Consistent styling with shadcn theme

## FOLDER STRUCTURE
```
src/
├── app/
│   ├── globals.css
│   ├── layout.tsx
│   ├── page.tsx
│   └── api/
│       ├── forms/
│       │   ├── submit/
│       │   │   └── route.ts
│       │   └── [id]/
│       │       └── route.ts
│       └── upload/
│           └── route.ts
├── components/
│   ├── ui/ (shadcn components)
│   ├── AdvancedForm.tsx
│   ├── FileUpload.tsx
│   └── ToastProvider.tsx
├── lib/
│   ├── utils.ts
│   ├── database.ts
│   ├── email.ts
│   └── validations.ts
└── types/
    └── index.ts
```

## BACKEND API IMPLEMENTATION

### 1. Form Submission API Route
Create `src/app/api/forms/submit/route.ts`:
```typescript
import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'
// Import your database connection
// import { db } from '@/lib/database'

// Define your form schema
const formSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  email: z.string().email('Invalid email'),
  message: z.string().min(1, 'Message is required'),
  // Add conditional fields
  category: z.string().optional(),
  priority: z.enum(['low', 'medium', 'high']).optional(),
  attachments: z.array(z.string()).optional(), // File URLs after upload
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validate the form data
    const validatedData = formSchema.parse(body)
    
    // Save to database
    // const result = await db.forms.create({
    //   data: validatedData
    // })
    
    // For now, just log the data (remove in production)
    console.log('Form submission:', validatedData)
    
    // Send success response
    return NextResponse.json(
      { 
        message: 'Form submitted successfully',
        id: 'temp-id' // Replace with actual database ID
      },
      { status: 200 }
    )
    
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          message: 'Validation error',
          errors: error.errors 
        },
        { status: 400 }
      )
    }
    
    console.error('Form submission error:', error)
    return NextResponse.json(
      { message: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    // Get all form submissions (with pagination)
    const { searchParams } = new URL(request.url)
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '10')
    
    // const submissions = await db.forms.findMany({
    //   skip: (page - 1) * limit,
    //   take: limit,
    //   orderBy: { createdAt: 'desc' }
    // })
    
    const submissions = [] // Replace with actual database query
    
    return NextResponse.json({
      submissions,
      pagination: {
        page,
        limit,
        total: 0 // Replace with actual count
      }
    })
    
  } catch (error) {
    console.error('Error fetching submissions:', error)
    return NextResponse.json(
      { message: 'Internal server error' },
      { status: 500 }
    )
  }
}
```

### 2. File Upload API Route (Vercel-Compatible)
Create `src/app/api/upload/route.ts`:
```typescript
import { NextRequest, NextResponse } from 'next/server'
import { put } from '@vercel/blob'

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    const files = formData.getAll('files') as File[]
    
    if (!files || files.length === 0) {
      return NextResponse.json(
        { message: 'No files uploaded' },
        { status: 400 }
      )
    }
    
    // IMPORTANT: Vercel has a 4.5MB limit for serverless functions
    const maxSize = 4 * 1024 * 1024 // 4MB to stay within limits
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf']
    
    const uploadedFiles = []
    
    for (const file of files) {
      if (file.size === 0) continue
      
      // Validate file type and size
      if (!allowedTypes.includes(file.type)) {
        return NextResponse.json(
          { message: `File type ${file.type} not allowed` },
          { status: 400 }
        )
      }
      
      if (file.size > maxSize) {
        return NextResponse.json(
          { message: 'File too large. Maximum size is 4MB for Vercel deployment' },
          { status: 400 }
        )
      }
      
      // Upload to Vercel Blob Storage
      const timestamp = Date.now()
      const fileName = `${timestamp}-${file.name.replace(/[^a-zA-Z0-9.-]/g, '_')}`
      
      const blob = await put(fileName, file, {
        access: 'public',
      })
      
      uploadedFiles.push({
        name: file.name,
        size: file.size,
        type: file.type,
        url: blob.url
      })
    }
    
    return NextResponse.json({
      message: 'Files uploaded successfully',
      files: uploadedFiles
    })
    
  } catch (error) {
    console.error('Upload error:', error)
    return NextResponse.json(
      { message: 'Upload failed' },
      { status: 500 }
    )
  }
}

// Alternative: Large file upload using client-side Vercel Blob
export async function GET(request: NextRequest) {
  try {
    // For files larger than 4MB, return a signed URL for client-side upload
    const { searchParams } = new URL(request.url)
    const filename = searchParams.get('filename')
    
    if (!filename) {
      return NextResponse.json(
        { message: 'Filename is required' },
        { status: 400 }
      )
    }
    
    // This would return a signed URL for client-side upload
    // Implementation depends on your specific needs
    
    return NextResponse.json({
      message: 'Use client-side upload for large files',
      uploadUrl: 'client-side-upload-endpoint'
    })
    
  } catch (error) {
    console.error('Upload URL generation error:', error)
    return NextResponse.json(
      { message: 'Failed to generate upload URL' },
      { status: 500 }
    )
  }
}
```

### 3. Individual Form Retrieval/Update
Create `src/app/api/forms/[id]/route.ts`:
```typescript
import { NextRequest, NextResponse } from 'next/server'
// import { db } from '@/lib/database'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params
    
    // const submission = await db.forms.findUnique({
    //   where: { id }
    // })
    
    const submission = null // Replace with actual database query
    
    if (!submission) {
      return NextResponse.json(
        { message: 'Form submission not found' },
        { status: 404 }
      )
    }
    
    return NextResponse.json(submission)
    
  } catch (error) {
    console.error('Error fetching submission:', error)
    return NextResponse.json(
      { message: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params
    const body = await request.json()
    
    // const updatedSubmission = await db.forms.update({
    //   where: { id },
    //   data: body
    // })
    
    return NextResponse.json({
      message: 'Form updated successfully',
      // submission: updatedSubmission
    })
    
  } catch (error) {
    console.error('Error updating submission:', error)
    return NextResponse.json(
      { message: 'Internal server error' },
      { status: 500 }
    )
  }
}
```

### 4. Frontend Form Integration
Update your form component to use the backend:
```typescript
// In your form component
const onSubmit = async (data: any) => {
  try {
    setIsLoading(true)
    
    // First upload files if any
    let fileUrls = []
    if (data.files && data.files.length > 0) {
      const formData = new FormData()
      data.files.forEach((file: File) => {
        formData.append('files', file)
      })
      
      const uploadResponse = await fetch('/api/upload', {
        method: 'POST',
        body: formData
      })
      
      if (!uploadResponse.ok) {
        throw new Error('File upload failed')
      }
      
      const uploadResult = await uploadResponse.json()
      fileUrls = uploadResult.files.map((f: any) => f.url)
    }
    
    // Submit form with file URLs
    const submitData = {
      ...data,
      attachments: fileUrls
    }
    
    const response = await fetch('/api/forms/submit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(submitData)
    })
    
    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.message || 'Submission failed')
    }
    
    const result = await response.json()
    toast({
      title: "Success!",
      description: "Form submitted successfully"
    })
    
    // Reset form or redirect
    reset()
    
  } catch (error) {
    toast({
      title: "Error",
      description: error.message || "Something went wrong",
      variant: "destructive"
    })
  } finally {
    setIsLoading(false)
  }
}
```

## DATABASE SETUP FOR VERCEL

### Vercel Postgres (Recommended)
1. **Create Database in Vercel Dashboard:**
   - Go to your Vercel project dashboard
   - Select the "Storage" tab and choose "Postgres" to create a new database instance
   - Select the region where your database reads and writes will take place
   - Connect to your project - this will create all the ENV variables automatically

2. **Update Prisma Schema for Vercel:**
Create `prisma/schema.prisma`:
```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model FormSubmission {
  id          String   @id @default(cuid())
  name        String
  email       String
  message     String
  category    String?
  priority    String?
  attachments String[] // Array of file URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("form_submissions")
}
```

3. **Database Connection Utility:**
Create `src/lib/database.ts`:
```typescript
import { sql } from '@vercel/postgres'
import { PrismaClient } from '@prisma/client'

// For direct SQL queries (if needed)
export { sql }

// Prisma client with connection pooling
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma = globalForPrisma.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
```

### Alternative: External Database Providers
If you prefer other providers:
- **Supabase**: Full-stack backend with real-time features
- **PlanetScale**: MySQL-compatible with branching
- **Railway**: Simple PostgreSQL hosting
- **Neon**: Serverless PostgreSQL

## VERCEL DEPLOYMENT CONFIGURATION

### 1. Vercel Configuration File
Create `vercel.json`:
```json
{
  "functions": {
    "app/api/**": {
      "maxDuration": 30
    }
  },
  "regions": ["iad1"],
  "framework": "nextjs"
}
```

### 2. Build Configuration
Update `package.json`:
```json
{
  "scripts": {
    "build": "prisma generate && next build",
    "postinstall": "prisma generate",
    "db:push": "prisma db push",
    "db:migrate": "prisma migrate dev",
    "db:studio": "prisma studio"
  }
}
```

### 1. Version Compatibility Issues
- **Problem**: Using Next.js 15 with shadcn causes dependency conflicts
- **Solution**: Stick to Next.js 14.x until shadcn fully supports v15

### 2. Hydration Errors
- **Problem**: Client-server mismatch with shadcn components
- **Solution**: Use "use client" directive for interactive components

### 3. Tailwind Configuration
- **Problem**: Styles not applying correctly after shadcn installation
- **Solution**: Ensure tailwind.config.js includes all shadcn paths

### 4. File Upload Type Conflicts
- **Problem**: TypeScript errors with file input types
- **Solution**: Use proper typing for FileList and uncontrolled inputs

### 5. Form Validation Complexity
- **Problem**: Zod schemas becoming unmanageable
- **Solution**: Break down schemas into smaller, reusable pieces

## TESTING CHECKLIST
Before considering the template complete, test:
- [ ] Form submission with all field types
- [ ] Conditional field rendering
- [ ] File upload functionality
- [ ] Email notification sending
- [ ] Form validation (client & server)
- [ ] Responsive design on mobile/desktop
- [ ] Error handling for all scenarios
- [ ] Database operations (if implemented)

## DEPLOYMENT READINESS
Ensure the template includes:
- [ ] Environment variable documentation
- [ ] Build optimization settings
- [ ] Error boundary components
- [ ] Loading states for all async operations
- [ ] SEO metadata configuration
- [ ] Performance optimization (image optimization, lazy loading)

## DOCUMENTATION TO INCLUDE
Create README.md with:
- Setup instructions for new developers
- Environment variable configuration
- Database setup steps
- Email service configuration
- Deployment instructions
- Common troubleshooting guide

## IDE SETTINGS FOR OPTIMAL COMPATIBILITY
Configure your IDE with:
```json
// .vscode/settings.json
{
  "typescript.preferences.importModuleSpecifier": "relative",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "editor.formatOnSave": true,
  "emmet.includeLanguages": {
    "typescript": "html",
    "javascript": "html"
  }
}
```

## MEMORY/CONTEXT FOR AI ASSISTANT
Remember these key points throughout development:
- Always use uncontrolled inputs for file uploads with React Hook Form
- Conditional validation requires .refine() or .superRefine() in Zod schemas
- EmailJS requires CORS configuration for production domains
- Database connections should be singleton instances in Next.js
- Toast notifications need a provider wrapper in the root layout
- File uploads should include both client and server-side validation

This template prioritizes compatibility, maintainability, and real-world functionality over cutting-edge features that might break.
Claude